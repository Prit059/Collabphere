import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import jsPDF from "jspdf";
import "jspdf-autotable";
import { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from "recharts";
import "./Admin.css";
import collegelogo from "../assets/cspit.webp";
import websitelogo from "../assets/LOGO.png";
import autoTable from "jspdf-autotable";

const Admin = () => {
    const [students, setStudents] = useState([]);
    const [pendingCount, setPendingCount] = useState(0);
    const [acceptedCount, setAcceptedCount] = useState(0);
    const [totalStudents, setTotalStudents] = useState(0);
    const [activeTab, setActiveTab] = useState("dashboard");

    // Fetch students & counts when component loads
    useEffect(() => {
        fetchStudents();
        fetchCounts();
    }, []);

    // Fetch students list
    const fetchStudents = async () => {
        try {
            const response = await axios.get("http://localhost:5000/students");
            setStudents(response.data);
        } catch (error) {
            console.error("Error fetching students:", error);
        }
    };

    // Fetch counts for pending & accepted students
    const fetchCounts = async () => {
        try {
            const response = await axios.get("http://localhost:5000/student-counts");
            setPendingCount(response.data.pending_students);
            setAcceptedCount(response.data.accepted_students);
            setTotalStudents(response.data.total_students);
        } catch (error) {
            console.error("Error fetching counts:", error);
        }
    };

    // Function to update student status
    const updateStatus = async (id, status) => {
        try {
            const response = await axios.put("http://localhost:5000/update-status", {
                id, status
            });

            if (response.status === 200) {
                alert(`Status updated to: ${status}`);
                fetchStudents();
                fetchCounts();
            } else {
                alert("Failed to update status.");
            }
        } catch (error) {
            console.error("Error updating status:", error);
            alert("Failed to update status.");
        }
    };

    const generateAcceptedReportPDF = () => {
        const doc = new jsPDF();
    
        const acceptedStudents = students.filter(student => student.status.toLowerCase() === "accepted");
    
        // HEADER LOGOS
        doc.addImage(websitelogo, "PNG", 10, 10, 30, 30); // Left logo
        doc.addImage(collegelogo, "WEBP", 170, 10, 30, 30); // Right logo
    
        // TITLE
        doc.setFontSize(16);
        doc.text("CHARUSAT - Accepted Students Report", 105, 50, { align: "center" });
    
        // TABLE
        const tableData = acceptedStudents.map((student) => [
            student.id,
            student.name,
            student.student_id,
            student.year,
            student.semester,
            student.email,
            student.status,
        ]);
    
        autoTable(doc, {
            head: [["ID", "Name", "Student ID", "Year", "Semester", "Email", "Status"]],
            body: tableData,
            startY: 60,
            styles: { fontSize: 10 },
            headStyles: { fillColor: [0, 102, 204] }
        });
    
        // FOOTER LINE
        const pageHeight = doc.internal.pageSize.height;
        doc.setDrawColor(100);
        doc.line(10, pageHeight - 20, 200, pageHeight - 20);
        doc.setFontSize(10);
        doc.text("Generated by CollabSphere | CHARUSAT", 105, pageHeight - 15, { align: "center" });
    
        // SAVE
        doc.save("Accepted_Students_Report.pdf");
    };

    
    // Chart Data
    const chartData = [
        { name: "Pending", count: pendingCount },
        { name: "Accepted", count: acceptedCount },
        { name: "Total", count: totalStudents }
    ];

    const renderContent = () => {
        switch (activeTab) {
            case "dashboard":
                return (
                    <>
                        <div className="dashboard-stats">
                            <div className="stat-card">
                                <h3>Pending Students</h3>
                                <p className="stat-value">{pendingCount}</p>
                                <div className="stat-panel">Open Panel</div>
                            </div>
                            <div className="stat-card">
                                <h3>Accepted Students</h3>
                                <p className="stat-value">{acceptedCount}</p>
                                <div className="stat-panel">Open Panel</div>
                            </div>
                            <div className="stat-card">
                                <h3>Total Students</h3>
                                <p className="stat-value">{totalStudents}</p>
                                <div className="stat-panel">Open Panel</div>
                            </div>
                        </div>

                        
                    </>
                );
            case "requests":
                return (
                    <div className="requests-container">
                        <h2>Pending Join Requests</h2>
                        <div className="requests-table">
                            <div className="table-header">
                                <div>ID</div>
                                <div>Name</div>
                                <div>Student ID</div>
                                <div>Year</div>
                                <div>Semester</div>
                                <div>Email</div>
                                <div>Status</div>
                                <div>Action</div>
                            </div>
                            {students.map((student) => (
                                <div className="table-row" key={student.id}>
                                    <div>{student.id}</div>
                                    <div>{student.name}</div>
                                    <div>{student.student_id}</div>
                                    <div>{student.year}</div>
                                    <div>{student.semester}</div>
                                    <div>{student.email}</div>
                                    <div>
                                        <span className={`status-badge ${student.status.toLowerCase()}`}>
                                            {student.status}
                                        </span>
                                    </div>
                                    <div className="action-buttons">
                                        <button 
                                            className="btn accept" 
                                            onClick={() => updateStatus(student.id, "accepted")}
                                        >
                                            Accept
                                        </button>
                                        <button 
                                            className="btn reject" 
                                            onClick={() => updateStatus(student.id, "rejected")}
                                        >
                                            Reject
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                );
            case "charts":
                return(
                    <div className="chart-container">
                            <h2>Student Status Overview</h2>
                            <ResponsiveContainer width="100%" height={300}>
                                <BarChart data={chartData}>
                                    <CartesianGrid strokeDasharray="3 3" />
                                    <XAxis dataKey="name" />
                                    <YAxis />
                                    <Tooltip />
                                    <Bar dataKey="count" fill="#4e73df" />
                                </BarChart>
                            </ResponsiveContainer>
                        </div>
                );
            default:
                return <div><h1 id="default">Select a tab to view content</h1></div>;
        }
    };

    return (
        <div className="admin-container">
            {/* Sidebar Navigation */}
            <div className="sidebar">
                <div className="sidebar-header">
                    <h2>CollabSphere</h2>
                </div>
                <ul className="sidebar-menu">
                    <li 
                        className={activeTab === "dashboard" ? "active" : ""}
                        onClick={() => setActiveTab("dashboard")}
                    >
                        <i className="fas fa-tachometer-alt"></i> Dashboard
                    </li>
                    <li 
                        className={activeTab === "requests" ? "active" : ""}
                        onClick={() => setActiveTab("requests")}
                    >
                        <i className="fas fa-users"></i> Join Requests
                    </li>
                    <li 
                        className={activeTab === "charts" ? "active" : ""}
                        onClick={() => setActiveTab("charts")}
                    >
                        <i className="fas fa-users"></i> Charts
                    </li>
                    <button onClick={generateAcceptedReportPDF} className="export">
                        Export Full Report PDF
                    </button>
                </ul>
            </div>

            {/* Main Content Area */}
            <div className="main-content">
                <div className="content-header">
                    <div className="he1">
                        <h1>{activeTab === "dashboard" && "Admin Dashboard"}</h1>      
                        <h1>{activeTab === "requests" && "Join Requests"}</h1>      
                        <h1>{activeTab === "charts" && "Analytics"}</h1>      
                    </div>
                    <div className="he2">
                        <button >
                            <Link id="idhome" to="/">Home</Link>
                        </button>
                    </div>
                </div>
                <div className="content-body">
                    {renderContent()}
                </div>
            </div>
        </div>
    );
};

export default Admin;